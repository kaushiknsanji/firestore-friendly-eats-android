// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    // Map holder for versions of all dependencies
    ext.versions = [:]

    // SDK versions
    versions.compileSdk = 30
    versions.targetSdk = 30
    versions.minSdk = 16

    // Gradle
    versions.gradle = '4.1.2'

    // Support libraries
    versions.appcompat = '1.2.0'
    versions.vectordrawable_animated = '1.1.0'
    versions.cardview = '1.0.0'
    versions.browser = '1.3.0'
    versions.material = '1.3.0'
    versions.multidex = '2.0.1'
    versions.recyclerview = '1.1.0'
    versions.lifecycle = '2.3.0'

    // Material Ratingbar Third-party library
    versions.materialratingbar = '1.4.0'

    // Image related library
    versions.glide = '4.12.0'

    // Google play services
    versions.google_services = '4.3.5'
    versions.play_services_auth = '19.0.0'

    // Firebase
    versions.firebase_bom = '26.4.0'
    versions.firebase_ui = '7.1.1'

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gradle"
        classpath "com.google.gms:google-services:$versions.google_services"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.27.0'
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }

    def isNonStable = { candidate -> 
        return ['alpha', 'beta', 'rc', 'SNAPSHOT'].any { word ->
            return candidate.version.contains(word)
        }
    }

    def isBlackListed = { candidate ->
        def blacklist = [
            'androidx.browser:browser'
        ]
        return blacklist.any { word ->
            return candidate.toString().contains(word)
        }
    }

    dependencyUpdates {
        rejectVersionIf {
            isNonStable(it.candidate) || isBlackListed(it.candidate)
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
